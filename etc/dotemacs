;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; Replace "sbcl" with the path to your implementation
    (setq inferior-lisp-program "sbcl")

(global-set-key (kbd "C-M-(") 'mwheel-scroll)
(global-set-key (kbd "C-M-)") 'mwheel-scroll)


(setq column-number-mode t)
;(menu-bar-mode 0) 
(tool-bar-mode 0)
;(scroll-bar-mode 0)

(progn
  (setq inhibit-startup-message t)
  (setq make-backup-files nil) 
  (global-font-lock-mode t)
  (xterm-mouse-mode t)
  (mouse-wheel-mode t)
  (show-paren-mode t)
  (transient-mark-mode t)
  (setq scroll-step 1)
  (global-hl-line-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq-default fill-column 52))

(global-set-key "\C-cs" 'slime-selector)



(add-hook 'lisp-mode-hook #'(lambda () 
                              (unless (get-process "SLIME Lisp")
                                (slime))))

(setq frame-title-format
  '(:eval
    (if buffer-file-name
        (replace-regexp-in-string
         "\\" "/"
         (replace-regexp-in-string
          (regexp-quote (getenv "HOME")) "~"
          (convert-standard-filename buffer-file-name)))
      (buffer-name))))


;; Define custom faces for menu elements
(defface my-menu-face
  '((t (:background "#333333" :foreground "#ffffff")))
  "Face for menu background and foreground colors.")

(defface my-region-face
  '((t (:background "#666666" :foreground "#ffffff")))
  "Face for selected menu items.")

;; Apply custom faces to menu elements
(set-face-attribute 'menu nil :inherit 'my-menu-face)
(set-face-attribute 'region nil :inherit 'my-region-face)

(load-theme 'deeper-blue t)

